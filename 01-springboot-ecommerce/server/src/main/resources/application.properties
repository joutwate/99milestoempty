spring.application.name=springboot-ecommerce-tutorial

# Replace the values below for the key-store and trust-store for your service.
server.ssl.key-store=classpath:server-nonprod.jks
server.ssl.key-store-password=changeme
server.ssl.key-password=changeme
server.ssl.trust-store=classpath:server-nonprod.jks
server.ssl.trust-store-password=changeme
# Mutual TLS/SSL
server.ssl.client-auth=want
server.port=8443

spring.mail.host=<fill me in>
spring.mail.port=465
spring.mail.username=<fill me in>
spring.mail.password=<fill me in>
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000
# SSL, post 465
spring.mail.properties.mail.smtp.socketFactory.port = 465
spring.mail.properties.mail.smtp.socketFactory.class = javax.net.ssl.SSLSocketFactory

spring.jpa.hibernate.ddl-auto=update

spring.datasource.url=jdbc:h2:mem:99milestoempty-h2;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.username=sa
spring.datasource.password=

nnmilestoempty.noreply.email=<fill me in>

management.endpoints.web.exposure.include=health,info,auditevents

logging.file.name=nonprod.log
logging.level.root=WARN

# The values provided here are generated and should NOT be reused. You should replace them with values that you do not
# share with anyone. If you'd like to generate some strong random values you can utilize
# SecureRandomStringUtils.randomAscii in this project. Salt values are generated using Spring Security's
# KeyGenerators.string().generateKey().
encryption.salt=56747e38113e2d70
encryption.password=A*4vi)KKvMs^_1qE-#=1$!Rxp4oP4G=|Lx)^'f.F'blWL(Ogq0J{aKc0'>Lc]-D|+-f&3,mu2Ak[|_f}4MmNA#=QLU$qdAP@(-|!=ky>%6ec9d.$ppS$7!Au<$|w$w(m

jwt.secret=3a'^UF^#W(SZ,CxBaS{$rc-I7P,4Cpg6^'va_l&obms]2E:l!Rzu1rjW7}Q5yM]aviSMF'FWe\\aJ{ZS&/Ag(b/e2nNBdq-ft"zVNiT{"&'xd@oDnF+Pbr=m7}Jb/B![3
jwt.expirationInMs=86400000
